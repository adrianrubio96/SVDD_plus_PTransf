import torch
import torch.nn as nn
import torch.nn.functional as F

from base.base_net import BaseNet

import math

class FTOPS_Mlp(BaseNet):

    def __init__(self, num_features, rep_dim, aux_dim, **kwargs):
        super().__init__()

        self.num_features = num_features # kwargs['num_features'] 
        self.rep_dim = rep_dim #kwargs['rep_dim']

        self.input_bn = nn.BatchNorm1d(9)

        self.cls_token = nn.Parameter(torch.zeros(1, 1, 128), requires_grad=True)
        trunc_normal_(self.cls_token, std=.02)

        self.norm = nn.LayerNorm(128)
                
        #self.fc1 = nn.Linear(self.num_features, 8, bias=False)
        #self.fc2 = nn.Linear(8, self.rep_dim, bias=False)
        
        self.fc1 = nn.Linear(128+aux_dim, 32, bias=False) # Input will contain MET info as auxiliary infomation
        self.fc2 = nn.Linear(32, 16, bias=False)
        self.fc3 = nn.Linear(16, self.rep_dim, bias=False)
        
        """
        self.fc1 = nn.Linear(self.num_features, 32, bias=False)
        self.fc2 = nn.Linear(32, 16, bias=False)
        self.fc3 = nn.Linear(16, 8, bias=False)
        self.fc4 = nn.Linear(8, self.rep_dim, bias=False)
        self.do1 = nn.Dropout(0.1)  # 20% Probability
         """

    def forward(self, x, v=None, ids=None, mask=None, aux=None):

        # Needed padding and transformations to the input tensor
        # x: (N, C, P) with C meaning the number of classes or types of objects
        # v: (N, 4, P) [px,py,pz,energy]
        # mask: (N, 1, P) -- real particle = 1, padded = 0
        with torch.no_grad():
            if mask is None:
                mask = torch.ones_like(x[:, :1])
            mask = mask.bool()

            padding_mask = ~mask.squeeze(1)  # (N, P)

        with torch.cuda.amp.autocast(enabled=True):
            # input embedding
            #x = self.embed(x).masked_fill(~mask.permute(2, 0, 1), 0)  # (P, N, C)
            x = self.input_bn(x)
            x = x.permute(2, 0, 1).contiguous()
            x = x.masked_fill(~mask.permute(2, 0, 1), 0)  # (P, N, C)

            # extract class token
            cls_tokens = self.cls_token.expand(1, x.size(1), -1)  # (1, N, C)
            
            # Modify shape
            x_cls = self.norm(cls_tokens).squeeze(0)

            # Merge x_cls and aux tensors in a single one
            x = torch.cat((x_cls, aux), dim=1)

        x = self.fc1(x)
        x = F.leaky_relu(x)
        #x = self.do1(x)
        x = self.fc2(x)
        x = F.leaky_relu(x)
        #x = self.do1(x)
        x = self.fc3(x)        
        #x = self.do1(x)
        #x = self.fc4(x)
        return x

class FTOPS_Mlp_Autoencoder(BaseNet):

    def __init__(self, **kwargs):
        super().__init__()

        self.num_features = kwargs['num_features']
        self.rep_dim = kwargs['rep_dim']


        #encoder
        self.fc1 = nn.Linear(self.num_features, 32, bias=False)
        self.fc2 = nn.Linear(32, 16, bias=False)
        self.fc3 = nn.Linear(16, self.rep_dim, bias=False)
       
        #decoder
        self.fc4 = nn.Linear(self.rep_dim, 16, bias=False)
        self.fc5 = nn.Linear(16, 32, bias=False)
        self.fc6 = nn.Linear(32, self.num_features, bias=False)

    def forward(self, x):
        x = self.fc1(x)
        x = F.leaky_relu(x)
        x = self.fc2(x)
        x = F.leaky_relu(x)
        x = self.fc3(x)
        x = self.fc4(x)
        x = F.leaky_relu(x)
        x = self.fc5(x)
        x = F.leaky_relu(x)
        x = self.fc6(x)
 
        return x

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # From https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

